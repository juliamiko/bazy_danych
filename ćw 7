USE AdventureWorks2022;

--ZAD 1

CREATE FUNCTION generacja_fibonacci(@first INT, @second INT)
RETURNS INT

AS
BEGIN
	RETURN @first + @second;
END;


CREATE PROCEDURE pisanie_Fibonacci (@n INT)
AS
BEGIN

	DECLARE @first INT;
	DECLARE @second INT;
	DECLARE @sum INT;
	DECLARE @iterator INT;
	SET @first = 0;
	SET @second = 1;
	SET @iterator = 3;
	PRINT @first;
	PRINT @second;
	
	WHILE (@iterator <= @n)
	BEGIN
	
		SET @sum = (SELECT dbo.generacja_Fibonacci(@first, @second));
		PRINT @sum;
		SET @first = @second;
		SET @second = @sum;
		SET @iterator = @iterator +1;
	END;
END;


EXEC pisanie_Fibonacci @n=10;




--ZAD2

CREATE TRIGGER duze
ON Person.Person
AFTER INSERT, UPDATE

AS
BEGIN
	UPDATE Person.Person 
	
	SET LastName = UPPER(LastName) 
	FROM Person.Person
END;

SELECT * FROM Person.Person;


INSERT INTO Person.BusinessEntity(rowguid)
VALUES(NEWID());


INSERT INTO Person.Person (BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, 
	EmailPromotion, AdditionalContactInfo, ModifiedDate)
VALUES (20778, 'IN', 0, 'NULL', 'anna', 'izabela', 'lecka', NULL, 1, NULL, 2008-01-24);


SELECT * FROM Person.Person WHERE BusinessEntityID = 20778;





--ZAD3
CREATE TRIGGER taxRateMonitoring
ON Sales.SalesTaxRate
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DECLARE @newTax FLOAT;
	DECLARE @oldTax FLOAT;
	
	SELECT @newTax = TaxRate FROM INSERTED;
	SELECT @oldTax =TaxRate FROM DELETED;

	IF (@newTax > 1.3 * @oldTax OR @newTax < 0.7 * @oldTax)
	PRINT 'Change in Tax is bigger than 30%'
END;


UPDATE Sales.SalesTaxRate 
SET TaxRate = 1 
WHERE SalesTaxRateID = 1;

SELECT * FROM Sales.SalesTaxRate WHERE SalesTaxRateID=1;
